// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/activity/friendship.proto

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendshipClient is the client API for Friendship service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipClient interface {
	GetFollower(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error)
	GetFollowing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error)
	GetFriend(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error)
}

type friendshipClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipClient(cc grpc.ClientConnInterface) FriendshipClient {
	return &friendshipClient{cc}
}

func (c *friendshipClient) GetFollower(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error) {
	out := new(FriendshipResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Friendship/GetFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipClient) GetFollowing(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error) {
	out := new(FriendshipResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Friendship/GetFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipClient) GetFriend(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FriendshipResponse, error) {
	out := new(FriendshipResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Friendship/GetFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServer is the server API for Friendship service.
// All implementations should embed UnimplementedFriendshipServer
// for forward compatibility
type FriendshipServer interface {
	GetFollower(context.Context, *emptypb.Empty) (*FriendshipResponse, error)
	GetFollowing(context.Context, *emptypb.Empty) (*FriendshipResponse, error)
	GetFriend(context.Context, *emptypb.Empty) (*FriendshipResponse, error)
}

// UnimplementedFriendshipServer should be embedded to have forward compatible implementations.
type UnimplementedFriendshipServer struct {
}

func (UnimplementedFriendshipServer) GetFollower(context.Context, *emptypb.Empty) (*FriendshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollower not implemented")
}
func (UnimplementedFriendshipServer) GetFollowing(context.Context, *emptypb.Empty) (*FriendshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedFriendshipServer) GetFriend(context.Context, *emptypb.Empty) (*FriendshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriend not implemented")
}

// UnsafeFriendshipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServer will
// result in compilation errors.
type UnsafeFriendshipServer interface {
	mustEmbedUnimplementedFriendshipServer()
}

func RegisterFriendshipServer(s grpc.ServiceRegistrar, srv FriendshipServer) {
	s.RegisterService(&Friendship_ServiceDesc, srv)
}

func _Friendship_GetFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).GetFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Friendship/GetFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).GetFollower(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friendship_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Friendship/GetFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).GetFollowing(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friendship_GetFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).GetFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Friendship/GetFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).GetFriend(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Friendship_ServiceDesc is the grpc.ServiceDesc for Friendship service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friendship_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.activity.proto.Friendship",
	HandlerType: (*FriendshipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollower",
			Handler:    _Friendship_GetFollower_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _Friendship_GetFollowing_Handler,
		},
		{
			MethodName: "GetFriend",
			Handler:    _Friendship_GetFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/activity/friendship.proto",
}
