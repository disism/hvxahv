// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/activity/outbox.proto

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutboxClient is the client API for Outbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutboxClient interface {
	CreateOutbox(ctx context.Context, in *CreateOutboxRequest, opts ...grpc.CallOption) (*CreateOutboxResponse, error)
	GetOutbox(ctx context.Context, in *GetOutboxRequest, opts ...grpc.CallOption) (*GetOutboxResponse, error)
	GetOutboxes(ctx context.Context, in *GetOutboxesRequest, opts ...grpc.CallOption) (*GetOutboxesResponse, error)
}

type outboxClient struct {
	cc grpc.ClientConnInterface
}

func NewOutboxClient(cc grpc.ClientConnInterface) OutboxClient {
	return &outboxClient{cc}
}

func (c *outboxClient) CreateOutbox(ctx context.Context, in *CreateOutboxRequest, opts ...grpc.CallOption) (*CreateOutboxResponse, error) {
	out := new(CreateOutboxResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Outbox/CreateOutbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outboxClient) GetOutbox(ctx context.Context, in *GetOutboxRequest, opts ...grpc.CallOption) (*GetOutboxResponse, error) {
	out := new(GetOutboxResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Outbox/GetOutbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outboxClient) GetOutboxes(ctx context.Context, in *GetOutboxesRequest, opts ...grpc.CallOption) (*GetOutboxesResponse, error) {
	out := new(GetOutboxesResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.activity.proto.Outbox/GetOutboxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutboxServer is the server API for Outbox service.
// All implementations should embed UnimplementedOutboxServer
// for forward compatibility
type OutboxServer interface {
	CreateOutbox(context.Context, *CreateOutboxRequest) (*CreateOutboxResponse, error)
	GetOutbox(context.Context, *GetOutboxRequest) (*GetOutboxResponse, error)
	GetOutboxes(context.Context, *GetOutboxesRequest) (*GetOutboxesResponse, error)
}

// UnimplementedOutboxServer should be embedded to have forward compatible implementations.
type UnimplementedOutboxServer struct {
}

func (UnimplementedOutboxServer) CreateOutbox(context.Context, *CreateOutboxRequest) (*CreateOutboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutbox not implemented")
}
func (UnimplementedOutboxServer) GetOutbox(context.Context, *GetOutboxRequest) (*GetOutboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutbox not implemented")
}
func (UnimplementedOutboxServer) GetOutboxes(context.Context, *GetOutboxesRequest) (*GetOutboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutboxes not implemented")
}

// UnsafeOutboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutboxServer will
// result in compilation errors.
type UnsafeOutboxServer interface {
	mustEmbedUnimplementedOutboxServer()
}

func RegisterOutboxServer(s grpc.ServiceRegistrar, srv OutboxServer) {
	s.RegisterService(&Outbox_ServiceDesc, srv)
}

func _Outbox_CreateOutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboxServer).CreateOutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Outbox/CreateOutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboxServer).CreateOutbox(ctx, req.(*CreateOutboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Outbox_GetOutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboxServer).GetOutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Outbox/GetOutbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboxServer).GetOutbox(ctx, req.(*GetOutboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Outbox_GetOutboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutboxesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutboxServer).GetOutboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.activity.proto.Outbox/GetOutboxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutboxServer).GetOutboxes(ctx, req.(*GetOutboxesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Outbox_ServiceDesc is the grpc.ServiceDesc for Outbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Outbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.activity.proto.Outbox",
	HandlerType: (*OutboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOutbox",
			Handler:    _Outbox_CreateOutbox_Handler,
		},
		{
			MethodName: "GetOutbox",
			Handler:    _Outbox_GetOutbox_Handler,
		},
		{
			MethodName: "GetOutboxes",
			Handler:    _Outbox_GetOutboxes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/activity/outbox.proto",
}
