// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/channel/administrative.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdministrativeClient is the client API for Administrative service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministrativeClient interface {
	// IsAdministrator It is the admin that returns true not false.
	IsAdministrator(ctx context.Context, in *IsAdministratorRequest, opts ...grpc.CallOption) (*IsAdministratorResponse, error)
	// IsOwner Is the channel owner.
	IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error)
	AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error)
	RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error)
	GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error)
	ExitAdministrator(ctx context.Context, in *ExitAdministratorRequest, opts ...grpc.CallOption) (*ExitAdministratorResponse, error)
}

type administrativeClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrativeClient(cc grpc.ClientConnInterface) AdministrativeClient {
	return &administrativeClient{cc}
}

func (c *administrativeClient) IsAdministrator(ctx context.Context, in *IsAdministratorRequest, opts ...grpc.CallOption) (*IsAdministratorResponse, error) {
	out := new(IsAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/IsAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeClient) IsOwner(ctx context.Context, in *IsOwnerRequest, opts ...grpc.CallOption) (*IsOwnerResponse, error) {
	out := new(IsOwnerResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/IsOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeClient) AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error) {
	out := new(AddAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/AddAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeClient) RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error) {
	out := new(RemoveAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/RemoveAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeClient) GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error) {
	out := new(GetAdministratorsResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/GetAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeClient) ExitAdministrator(ctx context.Context, in *ExitAdministratorRequest, opts ...grpc.CallOption) (*ExitAdministratorResponse, error) {
	out := new(ExitAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.channel.proto.Administrative/ExitAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrativeServer is the server API for Administrative service.
// All implementations should embed UnimplementedAdministrativeServer
// for forward compatibility
type AdministrativeServer interface {
	// IsAdministrator It is the admin that returns true not false.
	IsAdministrator(context.Context, *IsAdministratorRequest) (*IsAdministratorResponse, error)
	// IsOwner Is the channel owner.
	IsOwner(context.Context, *IsOwnerRequest) (*IsOwnerResponse, error)
	AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error)
	RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error)
	GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error)
	ExitAdministrator(context.Context, *ExitAdministratorRequest) (*ExitAdministratorResponse, error)
}

// UnimplementedAdministrativeServer should be embedded to have forward compatible implementations.
type UnimplementedAdministrativeServer struct {
}

func (UnimplementedAdministrativeServer) IsAdministrator(context.Context, *IsAdministratorRequest) (*IsAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdministrator not implemented")
}
func (UnimplementedAdministrativeServer) IsOwner(context.Context, *IsOwnerRequest) (*IsOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOwner not implemented")
}
func (UnimplementedAdministrativeServer) AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdministrator not implemented")
}
func (UnimplementedAdministrativeServer) RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdministrator not implemented")
}
func (UnimplementedAdministrativeServer) GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrators not implemented")
}
func (UnimplementedAdministrativeServer) ExitAdministrator(context.Context, *ExitAdministratorRequest) (*ExitAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitAdministrator not implemented")
}

// UnsafeAdministrativeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministrativeServer will
// result in compilation errors.
type UnsafeAdministrativeServer interface {
	mustEmbedUnimplementedAdministrativeServer()
}

func RegisterAdministrativeServer(s grpc.ServiceRegistrar, srv AdministrativeServer) {
	s.RegisterService(&Administrative_ServiceDesc, srv)
}

func _Administrative_IsAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).IsAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/IsAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).IsAdministrator(ctx, req.(*IsAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrative_IsOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).IsOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/IsOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).IsOwner(ctx, req.(*IsOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrative_AddAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).AddAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/AddAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).AddAdministrator(ctx, req.(*AddAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrative_RemoveAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).RemoveAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/RemoveAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).RemoveAdministrator(ctx, req.(*RemoveAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrative_GetAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).GetAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/GetAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).GetAdministrators(ctx, req.(*GetAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrative_ExitAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServer).ExitAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.channel.proto.Administrative/ExitAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServer).ExitAdministrator(ctx, req.(*ExitAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Administrative_ServiceDesc is the grpc.ServiceDesc for Administrative service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Administrative_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.channel.proto.Administrative",
	HandlerType: (*AdministrativeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAdministrator",
			Handler:    _Administrative_IsAdministrator_Handler,
		},
		{
			MethodName: "IsOwner",
			Handler:    _Administrative_IsOwner_Handler,
		},
		{
			MethodName: "AddAdministrator",
			Handler:    _Administrative_AddAdministrator_Handler,
		},
		{
			MethodName: "RemoveAdministrator",
			Handler:    _Administrative_RemoveAdministrator_Handler,
		},
		{
			MethodName: "GetAdministrators",
			Handler:    _Administrative_GetAdministrators_Handler,
		},
		{
			MethodName: "ExitAdministrator",
			Handler:    _Administrative_ExitAdministrator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/channel/administrative.proto",
}
