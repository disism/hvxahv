// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// Verify authentication Login with a valid user.
	// After successful authentication. The client must be registered to the device table for functions such as TOKEN checksum, managing devices, etc.
	// So you must submit a UA identifier in addition to the username and password when logging in.
	// A valid Token is returned and must be carried in subsequent API access operations.
	// https://datatracker.ietf.org/doc/html/rfc9068
	Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	// SetPublicKey unlike activitypub, his private key is inaccessible to the server.
	// The public key is used for hvxahv privacy-related asymmetric encryption key.
	SetPublicKey(ctx context.Context, in *SetPublicKeyRequest, opts ...grpc.CallOption) (*SetPublicKeyResponse, error)
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	// D-H Diffie–Hellman key exchange.
	// https://www.rfc-editor.org/rfc/rfc2631.html
	DHRequest(ctx context.Context, in *DHRequestData, opts ...grpc.CallOption) (*DHRequestResponse, error)
	SendDH(ctx context.Context, in *SendDHRequest, opts ...grpc.CallOption) (*SendDHResponse, error)
	GetPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrivateResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Authorization(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/Authorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetPublicKey(ctx context.Context, in *SetPublicKeyRequest, opts ...grpc.CallOption) (*SetPublicKeyResponse, error) {
	out := new(SetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/SetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DHRequest(ctx context.Context, in *DHRequestData, opts ...grpc.CallOption) (*DHRequestResponse, error) {
	out := new(DHRequestResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/DHRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendDH(ctx context.Context, in *SendDHRequest, opts ...grpc.CallOption) (*SendDHResponse, error) {
	out := new(SendDHResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/SendDH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetPrivate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPrivateResponse, error) {
	out := new(GetPrivateResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.auth.proto.Auth/GetPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// Verify authentication Login with a valid user.
	// After successful authentication. The client must be registered to the device table for functions such as TOKEN checksum, managing devices, etc.
	// So you must submit a UA identifier in addition to the username and password when logging in.
	// A valid Token is returned and must be carried in subsequent API access operations.
	// https://datatracker.ietf.org/doc/html/rfc9068
	Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	// SetPublicKey unlike activitypub, his private key is inaccessible to the server.
	// The public key is used for hvxahv privacy-related asymmetric encryption key.
	SetPublicKey(context.Context, *SetPublicKeyRequest) (*SetPublicKeyResponse, error)
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	// D-H Diffie–Hellman key exchange.
	// https://www.rfc-editor.org/rfc/rfc2631.html
	DHRequest(context.Context, *DHRequestData) (*DHRequestResponse, error)
	SendDH(context.Context, *SendDHRequest) (*SendDHResponse, error)
	GetPrivate(context.Context, *emptypb.Empty) (*GetPrivateResponse, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Authorization(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorization not implemented")
}
func (UnimplementedAuthServer) SetPublicKey(context.Context, *SetPublicKeyRequest) (*SetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicKey not implemented")
}
func (UnimplementedAuthServer) GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedAuthServer) DHRequest(context.Context, *DHRequestData) (*DHRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHRequest not implemented")
}
func (UnimplementedAuthServer) SendDH(context.Context, *SendDHRequest) (*SendDHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDH not implemented")
}
func (UnimplementedAuthServer) GetPrivate(context.Context, *emptypb.Empty) (*GetPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivate not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/Authorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authorization(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/SetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetPublicKey(ctx, req.(*SetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DHRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DHRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/DHRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DHRequest(ctx, req.(*DHRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendDH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendDH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/SendDH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendDH(ctx, req.(*SendDHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.auth.proto.Auth/GetPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPrivate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.auth.proto.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _Auth_Authorization_Handler,
		},
		{
			MethodName: "SetPublicKey",
			Handler:    _Auth_SetPublicKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _Auth_GetPublicKey_Handler,
		},
		{
			MethodName: "DHRequest",
			Handler:    _Auth_DHRequest_Handler,
		},
		{
			MethodName: "SendDH",
			Handler:    _Auth_SendDH_Handler,
		},
		{
			MethodName: "GetPrivate",
			Handler:    _Auth_GetPrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/auth/auth.proto",
}
