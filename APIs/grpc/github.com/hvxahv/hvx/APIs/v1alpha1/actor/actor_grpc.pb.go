// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/actor/actor.proto

package actor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActorClient is the client API for Actor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorClient interface {
	// IsExist returns true if the actor with the given name(PreferredUsername) exists.
	IsExist(ctx context.Context, in *IsExistRequest, opts ...grpc.CallOption) (*IsExistResponse, error)
	IsRemoteExist(ctx context.Context, in *IsRemoteExistRequest, opts ...grpc.CallOption) (*IsExistResponse, error)
	// Create creates a new actor.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get returns the actor with the given name(PreferredUsername).
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Search returns the set of actors by the username.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// EditActor Edits the actor profile.
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	// Delete Delete the actor.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// GetActorByUsername returns the actor by account username.
	GetActorByUsername(ctx context.Context, in *GetActorByUsernameRequest, opts ...grpc.CallOption) (*ActorData, error)
	GetActorByAddress(ctx context.Context, in *GetActorByAddressRequest, opts ...grpc.CallOption) (*ActorData, error)
}

type actorClient struct {
	cc grpc.ClientConnInterface
}

func NewActorClient(cc grpc.ClientConnInterface) ActorClient {
	return &actorClient{cc}
}

func (c *actorClient) IsExist(ctx context.Context, in *IsExistRequest, opts ...grpc.CallOption) (*IsExistResponse, error) {
	out := new(IsExistResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/IsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) IsRemoteExist(ctx context.Context, in *IsRemoteExistRequest, opts ...grpc.CallOption) (*IsExistResponse, error) {
	out := new(IsExistResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/IsRemoteExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) GetActorByUsername(ctx context.Context, in *GetActorByUsernameRequest, opts ...grpc.CallOption) (*ActorData, error) {
	out := new(ActorData)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/GetActorByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) GetActorByAddress(ctx context.Context, in *GetActorByAddressRequest, opts ...grpc.CallOption) (*ActorData, error) {
	out := new(ActorData)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.actor.proto.Actor/GetActorByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorServer is the server API for Actor service.
// All implementations should embed UnimplementedActorServer
// for forward compatibility
type ActorServer interface {
	// IsExist returns true if the actor with the given name(PreferredUsername) exists.
	IsExist(context.Context, *IsExistRequest) (*IsExistResponse, error)
	IsRemoteExist(context.Context, *IsRemoteExistRequest) (*IsExistResponse, error)
	// Create creates a new actor.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get returns the actor with the given name(PreferredUsername).
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Search returns the set of actors by the username.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// EditActor Edits the actor profile.
	Edit(context.Context, *EditRequest) (*EditResponse, error)
	// Delete Delete the actor.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// GetActorByUsername returns the actor by account username.
	GetActorByUsername(context.Context, *GetActorByUsernameRequest) (*ActorData, error)
	GetActorByAddress(context.Context, *GetActorByAddressRequest) (*ActorData, error)
}

// UnimplementedActorServer should be embedded to have forward compatible implementations.
type UnimplementedActorServer struct {
}

func (UnimplementedActorServer) IsExist(context.Context, *IsExistRequest) (*IsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExist not implemented")
}
func (UnimplementedActorServer) IsRemoteExist(context.Context, *IsRemoteExistRequest) (*IsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRemoteExist not implemented")
}
func (UnimplementedActorServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActorServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActorServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedActorServer) Edit(context.Context, *EditRequest) (*EditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedActorServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActorServer) GetActorByUsername(context.Context, *GetActorByUsernameRequest) (*ActorData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorByUsername not implemented")
}
func (UnimplementedActorServer) GetActorByAddress(context.Context, *GetActorByAddressRequest) (*ActorData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorByAddress not implemented")
}

// UnsafeActorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorServer will
// result in compilation errors.
type UnsafeActorServer interface {
	mustEmbedUnimplementedActorServer()
}

func RegisterActorServer(s grpc.ServiceRegistrar, srv ActorServer) {
	s.RegisterService(&Actor_ServiceDesc, srv)
}

func _Actor_IsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).IsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/IsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).IsExist(ctx, req.(*IsExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_IsRemoteExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRemoteExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).IsRemoteExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/IsRemoteExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).IsRemoteExist(ctx, req.(*IsRemoteExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_GetActorByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).GetActorByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/GetActorByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).GetActorByUsername(ctx, req.(*GetActorByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_GetActorByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).GetActorByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.actor.proto.Actor/GetActorByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).GetActorByAddress(ctx, req.(*GetActorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Actor_ServiceDesc is the grpc.ServiceDesc for Actor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.actor.proto.Actor",
	HandlerType: (*ActorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsExist",
			Handler:    _Actor_IsExist_Handler,
		},
		{
			MethodName: "IsRemoteExist",
			Handler:    _Actor_IsRemoteExist_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Actor_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Actor_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Actor_Search_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _Actor_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Actor_Delete_Handler,
		},
		{
			MethodName: "GetActorByUsername",
			Handler:    _Actor_GetActorByUsername_Handler,
		},
		{
			MethodName: "GetActorByAddress",
			Handler:    _Actor_GetActorByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/actor/actor.proto",
}
