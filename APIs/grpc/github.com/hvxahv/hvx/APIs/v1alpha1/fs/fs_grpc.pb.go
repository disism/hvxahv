// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/fs/fs.proto

package fs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FsClient is the client API for Fs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FsClient interface {
	FsPut(ctx context.Context, in *FsPutRequest, opts ...grpc.CallOption) (*FsPutResponse, error)
	FsRemove(ctx context.Context, in *FsRemoveRequest, opts ...grpc.CallOption) (*FsRemoveResponse, error)
}

type fsClient struct {
	cc grpc.ClientConnInterface
}

func NewFsClient(cc grpc.ClientConnInterface) FsClient {
	return &fsClient{cc}
}

func (c *fsClient) FsPut(ctx context.Context, in *FsPutRequest, opts ...grpc.CallOption) (*FsPutResponse, error) {
	out := new(FsPutResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.fs.proto.Fs/FsPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) FsRemove(ctx context.Context, in *FsRemoveRequest, opts ...grpc.CallOption) (*FsRemoveResponse, error) {
	out := new(FsRemoveResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.fs.proto.Fs/FsRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsServer is the server API for Fs service.
// All implementations should embed UnimplementedFsServer
// for forward compatibility
type FsServer interface {
	FsPut(context.Context, *FsPutRequest) (*FsPutResponse, error)
	FsRemove(context.Context, *FsRemoveRequest) (*FsRemoveResponse, error)
}

// UnimplementedFsServer should be embedded to have forward compatible implementations.
type UnimplementedFsServer struct {
}

func (UnimplementedFsServer) FsPut(context.Context, *FsPutRequest) (*FsPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsPut not implemented")
}
func (UnimplementedFsServer) FsRemove(context.Context, *FsRemoveRequest) (*FsRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsRemove not implemented")
}

// UnsafeFsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FsServer will
// result in compilation errors.
type UnsafeFsServer interface {
	mustEmbedUnimplementedFsServer()
}

func RegisterFsServer(s grpc.ServiceRegistrar, srv FsServer) {
	s.RegisterService(&Fs_ServiceDesc, srv)
}

func _Fs_FsPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).FsPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.fs.proto.Fs/FsPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).FsPut(ctx, req.(*FsPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_FsRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).FsRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.fs.proto.Fs/FsRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).FsRemove(ctx, req.(*FsRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fs_ServiceDesc is the grpc.ServiceDesc for Fs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.fs.proto.Fs",
	HandlerType: (*FsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FsPut",
			Handler:    _Fs_FsPut_Handler,
		},
		{
			MethodName: "FsRemove",
			Handler:    _Fs_FsRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/fs/fs.proto",
}
