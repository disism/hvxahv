// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1alpha1/saved/saved.proto

package saved

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SavedClient is the client API for Saved service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SavedClient interface {
	// Create Save the hash of the uploaded file to the database,
	// Because the file needs to be encrypted for the user to
	// choose, the upload to the IPFS file server should be
	// done in the client and the returned ipfs cid should be
	// submitted to the server, which will save it.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetSaved(ctx context.Context, in *GetSavedRequest, opts ...grpc.CallOption) (*Save, error)
	GetSaves(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSavesResponse, error)
	// EditSaved Edit by saved ID.
	// View the EditSavedRequest relevant parameters that are allowed
	// to be changed.
	EditSaved(ctx context.Context, in *EditSavedRequest, opts ...grpc.CallOption) (*EditSavedResponse, error)
	// Delete by saved ID.
	// Users must be informed that data that exists in IPFS files
	// is not actually deleted, and user-friendly prompts need
	// to be returned.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// DeleteSaves This API is typically used when deleting an account.
	// When a user's account is completely deleted, no data should remain.
	DeleteSaves(ctx context.Context, in *DeleteSavesRequest, opts ...grpc.CallOption) (*DeleteSavesResponse, error)
}

type savedClient struct {
	cc grpc.ClientConnInterface
}

func NewSavedClient(cc grpc.ClientConnInterface) SavedClient {
	return &savedClient{cc}
}

func (c *savedClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) GetSaved(ctx context.Context, in *GetSavedRequest, opts ...grpc.CallOption) (*Save, error) {
	out := new(Save)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/GetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) GetSaves(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSavesResponse, error) {
	out := new(GetSavesResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/GetSaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) EditSaved(ctx context.Context, in *EditSavedRequest, opts ...grpc.CallOption) (*EditSavedResponse, error) {
	out := new(EditSavedResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/EditSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) DeleteSaves(ctx context.Context, in *DeleteSavesRequest, opts ...grpc.CallOption) (*DeleteSavesResponse, error) {
	out := new(DeleteSavesResponse)
	err := c.cc.Invoke(ctx, "/hvx.api.v1alpha1.saved.proto.Saved/DeleteSaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SavedServer is the server API for Saved service.
// All implementations should embed UnimplementedSavedServer
// for forward compatibility
type SavedServer interface {
	// Create Save the hash of the uploaded file to the database,
	// Because the file needs to be encrypted for the user to
	// choose, the upload to the IPFS file server should be
	// done in the client and the returned ipfs cid should be
	// submitted to the server, which will save it.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetSaved(context.Context, *GetSavedRequest) (*Save, error)
	GetSaves(context.Context, *emptypb.Empty) (*GetSavesResponse, error)
	// EditSaved Edit by saved ID.
	// View the EditSavedRequest relevant parameters that are allowed
	// to be changed.
	EditSaved(context.Context, *EditSavedRequest) (*EditSavedResponse, error)
	// Delete by saved ID.
	// Users must be informed that data that exists in IPFS files
	// is not actually deleted, and user-friendly prompts need
	// to be returned.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// DeleteSaves This API is typically used when deleting an account.
	// When a user's account is completely deleted, no data should remain.
	DeleteSaves(context.Context, *DeleteSavesRequest) (*DeleteSavesResponse, error)
}

// UnimplementedSavedServer should be embedded to have forward compatible implementations.
type UnimplementedSavedServer struct {
}

func (UnimplementedSavedServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSavedServer) GetSaved(context.Context, *GetSavedRequest) (*Save, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaved not implemented")
}
func (UnimplementedSavedServer) GetSaves(context.Context, *emptypb.Empty) (*GetSavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaves not implemented")
}
func (UnimplementedSavedServer) EditSaved(context.Context, *EditSavedRequest) (*EditSavedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSaved not implemented")
}
func (UnimplementedSavedServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSavedServer) DeleteSaves(context.Context, *DeleteSavesRequest) (*DeleteSavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSaves not implemented")
}

// UnsafeSavedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SavedServer will
// result in compilation errors.
type UnsafeSavedServer interface {
	mustEmbedUnimplementedSavedServer()
}

func RegisterSavedServer(s grpc.ServiceRegistrar, srv SavedServer) {
	s.RegisterService(&Saved_ServiceDesc, srv)
}

func _Saved_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_GetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/GetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetSaved(ctx, req.(*GetSavedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_GetSaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetSaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/GetSaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetSaves(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_EditSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSavedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).EditSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/EditSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).EditSaved(ctx, req.(*EditSavedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_DeleteSaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).DeleteSaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.api.v1alpha1.saved.proto.Saved/DeleteSaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).DeleteSaves(ctx, req.(*DeleteSavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Saved_ServiceDesc is the grpc.ServiceDesc for Saved service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Saved_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.api.v1alpha1.saved.proto.Saved",
	HandlerType: (*SavedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Saved_Create_Handler,
		},
		{
			MethodName: "GetSaved",
			Handler:    _Saved_GetSaved_Handler,
		},
		{
			MethodName: "GetSaves",
			Handler:    _Saved_GetSaves_Handler,
		},
		{
			MethodName: "EditSaved",
			Handler:    _Saved_EditSaved_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Saved_Delete_Handler,
		},
		{
			MethodName: "DeleteSaves",
			Handler:    _Saved_DeleteSaves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1alpha1/saved/saved.proto",
}
