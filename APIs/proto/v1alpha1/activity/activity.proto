syntax = "proto3";

package hvx.api.v1alpha1.activity.proto;
option go_package = "github.com/hvxahv/hvx/APIs/v1alpha1/activity";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "proto/v1alpha1/article/article.proto";

// Note - This interface is subject to frequent changes in the course of implementation.

// Maybe there's a better solution, but I'm so stupid that I'll just do it.
/**
	Pass the to, bto, cc, bcc, audience fields.
	First find the target's inbox and then pass the activity to its participants,
	Activity create an activity that is sent to the activity pub instance server of the specified actor (server to server interactions),
	When sending messages to the Mastodon server, we found that Mastodon must verify the user's identity by signing,
	and if the actor's private key is stored locally,
	we need to sign locally and then submit the signature to the server before sending,
	but we found serious performance problems when doing rsa private key signing on the client side,
	which is why we put the key supporting activitypub feature on the server.
	So in the tradeoff of privacy, we decided to design two key systems,
	one for asymmetric encryption of accounts and one for activitypub key pairs.
 */

// Activity All activitypub publishing activities are performed through this service.
service Activity {
  // Activity base activity API.
  rpc Activity (ActivityRequest) returns (ActivityResponse) {
    option (google.api.http) = {
      post: "/api/v1/activity",
      body: "*"
    };
  }

  // ArticleCreateActivity Create article activity interface.  
  rpc ArticleCreateActivity (ArticleCreateActivityRequest) returns (ActivityResponse) {}
}

message ActivityRequest {
  // This interface is designed for simple Activitypub request interfaces, for complex activities a more complex interface should be implemented.
  // For example, the type of article creation activity does not use this API and should use ArticleCreateActivity.
  string TO = 1 [json_name = "to"];

  // activity type.
  string type = 2;

  // body data that will have the final request for server-to-server interaction.
  string body = 3;
}

message ActivityResponse {
  string code = 1;
  string status = 2;
  // return delivery status, success or failure
  repeated string successes = 3;
  repeated string failures = 4;
}


message ArticleCreateActivityRequest {
  int64 accountId = 1;
  int64 actorId = 2;
  int64 articleId = 3;
  article.proto.CreateRequest article = 4;
}

