syntax = "proto3";

package hvx.api.v1alpha1.auth.proto;
option go_package = "github.com/hvxahv/hvx/APIs/v1alpha1/auth";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";

// Auth hvx's authentication center, which will provide account password authentication, obtain keys, 
// and provide Diffie-Hellman key exchange features.
service Auth {

  // Verify authentication Login with a valid user.
  // After successful authentication. The client must be registered to the device table for functions such as TOKEN checksum, managing devices, etc.
  // So you must submit a UA identifier in addition to the username and password when logging in.
  // A valid Token is returned and must be carried in subsequent API access operations.
  // https://datatracker.ietf.org/doc/html/rfc9068
  rpc Authorization (AuthorizationRequest) returns (AuthorizationResponse) {
    option (google.api.http) = {
      post: "/auth",
      body: "*"
    };
  }

  // SetPublicKey unlike activitypub, his private key is inaccessible to the server.
  // The public key is used for hvxahv privacy-related asymmetric encryption key.
  rpc SetPublicKey(SetPublicKeyRequest) returns (SetPublicKeyResponse) {}

  // GetPublicKey Use the account id to get the account public key. 
  // Not activitypub public key.
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse) {
    option (google.api.http) = {
      get: "/api/v1/auth/{accountId}/public",
    };
  }

  // The key exchange API in the auth service.
  // D-H Diffieâ€“Hellman key exchange.
  // https://www.rfc-editor.org/rfc/rfc2631.html

  // GetPrivateKey First, initiate a request to obtain the private key from the logged-in client.
  rpc GetPrivateKey (GetPrivateKeyRequest) returns (GetPrivateKeyResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/private"
      body: "*"
    };
  }

  // GetDH Get the dh parameter.
  rpc GetDH(google.protobuf.Empty) returns (GetDHResponse) {
    option (google.api.http) = {
      get: "/api/v1/auth/private/dh"
    };
  }

  // SendPrivateKey Send the encrypted private key.
  rpc SendPrivateKey (SendPrivateKeyRequest) returns (SendPrivateKeyResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/private/dh"
      body: "*"
    };
  }

  // WaitPrivateKey Wait for the other client to send the encrypted private key.
  rpc WaitPrivateKey (google.protobuf.Empty) returns (WaitPrivateKeyResponse) {
    option (google.api.http) = {
      get: "/api/v1/auth/private"
    };
  }

}

message AuthorizationRequest {
  string username = 1;
  string password = 2;
}

message AuthorizationResponse {
  string code = 1;
  string status = 2;
  int64 accountId = 3;

  // authorizationToken The TOKEN will be returned to the client after successful login, 
  // and the client will carry the TOKEN when accessing .
  string authorizationToken = 4;
  int64 actorId = 5;
  string mail = 6;
  int64 deviceId = 7;
}

message SetPublicKeyRequest {
  int64 accountId = 1;
  string publicKey = 2;
}

message SetPublicKeyResponse {
  string code = 1;
  string status = 2;
}

message GetPublicKeyRequest {
  string accountId = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetPublicKeyResponse {
  string publicKey = 2;
}

// DH 
message GetPrivateKeyRequest {
  int64 deviceId = 1;
  string publicKey = 2;
  string iv = 3;
}

message GetPrivateKeyResponse {
  string code = 1;
  string status = 2;
}

message GetDHResponse {
  int64 deviceId = 1;
  string publicKey = 2;
  string iv = 3;
}

message SendPrivateKeyRequest {
  int64 deviceId = 1;
  string publicKey = 2;

  // Use the request iv encryption key .
  string privateKey = 3;
}

message SendPrivateKeyResponse {
  string code = 1;
  string status = 2;
}

message GetPrivateResponse {
  string code = 1;
  string private = 2;
}

message WaitPrivateKeyResponse {
  int64 deviceId = 1;
  string publicKey = 2;
  string private = 3;
}