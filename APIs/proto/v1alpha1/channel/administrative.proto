syntax = "proto3";

package hvx.api.v1alpha1.channel.proto;
option go_package = "github.com/hvxahv/hvx/APIs/v1alpha1/channel";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "proto/v1alpha1/actor/actor.proto";

service Administrative {
  // IsAdministrator It is the admin that returns true not false.
  rpc IsAdministrator(IsAdministratorRequest) returns (IsAdministratorResponse) {}
  // IsOwner Is the channel owner.
  rpc IsOwner(IsOwnerRequest) returns (IsOwnerResponse) {}

  rpc AddAdministrator(AddAdministratorRequest) returns (AddAdministratorResponse) {
    option (google.api.http) = {
      post: "/api/v1/channel/admin",
      body: "*"
    };
  }

  rpc RemoveAdministrator(RemoveAdministratorRequest) returns (RemoveAdministratorResponse) {
    option (google.api.http) = {
      delete: "/api/v1/channel/admin",
      body: "*"
    };
  }

  rpc GetAdministrators(GetAdministratorsRequest) returns (GetAdministratorsResponse) {
    option (google.api.http) = {
      get: "/api/v1/channel/admin/{channelId}",
    };
  }

  rpc ExitAdministrator(ExitAdministratorRequest) returns (ExitAdministratorResponse) {
    option (google.api.http) = {
      post: "/api/v1/channel/admin/exit",
    };
  }
}

message IsAdministratorRequest {
  int64 channelId = 1;
  int64 adminId = 2;
}

message IsAdministratorResponse {
  bool isAdministrator = 1;
}

message IsOwnerRequest {
  int64 channelId = 1;
  int64 ownerId = 2;
}

message IsOwnerResponse {
  bool isOwner = 1;
}

message AddAdministratorRequest {
  int64 channelId = 1;
  int64 addedId = 3;
}

message AddAdministratorResponse {
  string code = 1;
  string status = 2;
}

message RemoveAdministratorRequest {
  int64 channelId = 1;
  int64 removedId = 2;
}

message RemoveAdministratorResponse {
  string code = 1;
  string status = 2;
}

message GetAdministratorsRequest {
  string channelId = 1 [(google.api.field_behavior) = REQUIRED];
}

message AdminsData {
  bool isOwner = 1;
  actor.proto.ActorData admin = 2;
}

message GetAdministratorsResponse {
  string code = 1;
  repeated AdminsData admins = 2;
}

message ExitAdministratorRequest {
  int64 channelId = 1;
  int64 adminId = 2;
}

message ExitAdministratorResponse {
  string code = 1;
  string status = 2;
}