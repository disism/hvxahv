syntax = "proto3";

package hvx.api.v1alpha1.channel.proto;
option go_package = "github.com/hvxahv/hvx/APIs/v1alpha1/channel";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "proto/v1alpha1/actor/actor.proto";

service Subscriber {

  // AddSubscriber Add a subscriber, operated by channel owner or administrator only.
  rpc AddSubscriber(AddSubscriberRequest) returns (AddSubscriberResponse) {
    option (google.api.http) = {
      post: "/api/v1/channel/subscriber",
      body: "*"
    };
  }

  // RemoveSubscriber Remove a subscriber, operated by channel owner or administrator only.
  rpc RemoveSubscriber(RemoveSubscriberRequest) returns (RemoveSubscriberResponse) {
    option (google.api.http) = {
      delete: "/api/v1/channel/subscriber",
      body: "*"
    };
  }

  // GetSubscribers Get a list of subscribers to channel,
  // operated by channel owner and administrator only.
  rpc GetSubscribers(GetSubscribersRequest) returns (GetSubscribersResponse) {
    option (google.api.http) = {
      get: "/api/v1/channel/{channelId}/subscribers",
    };
  }

  // Subscription is the API through which the user initiates a subscription to the channel.
  rpc Subscription(SubscriptionRequest) returns (SubscriptionResponse) {
    option (google.api.http) = {
      post: "/api/v1/channel/subscription",
      body: "*"
    };
  }

  // Unsubscribe The API for user-initiated unsubscriptions.
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {
    option (google.api.http) = {
      post: "/api/v1/channel/unsubscribe",
      body: "*"
    };
  }

}

message AddSubscriberRequest {
  int64 channelId = 1;
  int64 subscriberId = 2;
}

message AddSubscriberResponse {
  string code = 1;
  string status = 2;
}

message RemoveSubscriberRequest {
  int64 channelId = 1;
  int64 removedId = 2;
}

message RemoveSubscriberResponse {
  string code = 1;
  string status = 2;
}

message GetSubscribersRequest {
  string channelId = 1 [(google.api.field_behavior) = REQUIRED];
  int64 adminId = 2;
}

message GetSubscribersResponse {
  string code = 1;
  string status = 2;

  // The subscriber is an actor type of activitypub, so it will return actor data of type REPEATED.
  repeated actor.proto.ActorData subscriber = 3;
}

message SubscriptionRequest {
  int64 channelId = 1;
}

message SubscriptionResponse {
  string code = 1;
  string status = 2;
}

message UnsubscribeRequest {
  int64 channelId = 1;
}

message UnsubscribeResponse {
  string code = 1;
  string status = 2;
}
