syntax = "proto3";

package hvx.api.v1alpha1.account.proto;
option go_package = "github.com/hvxahv/hvx/APIs/v1alpha1/account";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";

// Accounts hvx account system services.
service Accounts {
  // IsExist checks if the account exists. The account name(username) is specified in the request.
  // If the account exists, it returns true. Otherwise, it returns false.
  rpc IsExist (IsExistRequest) returns (IsExistResponse) {}

  // Create a new account.
  rpc Create (CreateRequest) returns (CreateResponse) {}

  // Get the account by username. 
  rpc GetByUsername (GetByUsernameRequest) returns (GetByUsernameResponse) {
    option (google.api.http) = {
      get: "/api/v1/account/{username}"
    };
  }

  // Delete the account. 
  rpc Delete (DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/v1/account",
      body: "*"
    };
  }

  // EditUsername Update the account username.
  // will change the account username and the preferred_username in Actor.
  rpc EditUsername (EditUsernameRequest) returns (EditUsernameResponse) {
    option (google.api.http) = {
      patch: "/api/v1/account/username",
      body: "*"
    };
  }

  // EditPassword Update the account password.
  rpc EditPassword (EditPasswordRequest) returns (EditPasswordResponse) {
    option (google.api.http) = {
      patch: "/api/v1/account/password",
      body: "*"
    };
  }

  // EditEmail Edit the unique email for the account.
  rpc EditEmail (EditEmailRequest) returns (EditEmailResponse) {
    option (google.api.http) = {
      patch: "/api/v1/account/mail",
      body: "*"
    };
  }

  // Verify The API to verify that the account is correct.
  rpc Verify (VerifyRequest) returns (VerifyResponse) {}

  // GetPrivateKey Obtain the ActivityPub private key for use by ActivityPub.
  // Note that the private key is server-generated and, unlike the one generated by 
  // the client and presented to the client when the account is created, the 
  // key pair is only applied to the ActivityPub .
  rpc GetPrivateKey (GetPrivateKeyRequest) returns (GetPrivateKeyResponse) {}

}

// IsExistRequest Provide the user name and check if the user name exists.
message IsExistRequest {
  string username = 1;
}

// IsExistResponse Returns a boolean result, 
// true if the username exists, flase otherwise.
message IsExistResponse {
  bool isExist = 1;
}

// CreateRequest Use the following parameters to create the account.
message CreateRequest {
  string username = 1;
  string mail = 2;
  string password = 3;

  // publicKey As the public key of the account, it will be generated by the client and submitted to the server,
  // but the privateKey will be kept only on the client and the server should never get the user's private key.
  string publicKey = 4;
}

// CreateResponse Create account return code with status.
message CreateResponse {
  string code = 1;
  string status = 2;
}

// GetByUsernameRequest The username included in the request address is dynamic.
message GetByUsernameRequest {
  // The user name field is used as a dynamic parameter.
  string username = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetByUsernameResponse Account data found and returned by username.
message GetByUsernameResponse {
  int64  accountId = 1;
  string username = 2;
  string mail = 3;
  string password = 4;
  int64  actorId = 5;

  // Whether the account is private or not.
  bool isPrivate = 6;
}

// DeleteRequest Request to delete an account.
message DeleteRequest {
  // If requested via http, the account ID is obtained from the context.
  // https://github.com/hvxahv/hvx/blob/main/microsvc/auth.go#L31
  int64  accountId = 1;
  string password = 2;
}

// DeleteResponse Returns the status of the deleted account.
message DeleteResponse {
  string code = 1;
  string status = 2;
}

message EditUsernameRequest {
  int64  accountId = 1;
  string username = 2;
}

message EditUsernameResponse {
  string code = 1;
  string status = 2;
}

// EditPasswordRequest The structure of the request to change the account password.
// {
//  "username": "username",
//  "password": "password",
//  "new": "newPassword"
//}
message EditPasswordRequest {
  string username = 1;
  string password = 2;
  string newPassword = 3 [json_name = "new"];
}

message EditPasswordResponse {
  string code = 1;
  string status = 2;
}

message EditEmailRequest {
  int64  accountId = 1;
  string mail = 2;
}

message EditEmailResponse {
  string code = 1;
  string status = 2;
}

// VerifyRequest Verify the request for the account, submit the account name and password.
message VerifyRequest {
  string username = 1;
  string password = 2;
}

// VerifyResponse Returns the data after validation, the status 
// code, the status, and the data needed for the next operation.
message VerifyResponse {
  string code = 1;
  string status = 2;
  int64  accountId = 3;
  string username = 4;
  string mail = 5;
  int64  actorId = 6;
}

message GetPrivateKeyRequest {
  int64  accountId = 1;
}

message GetPrivateKeyResponse {
  string code = 1;
  string status = 2;
  string privateKey = 3;
}
