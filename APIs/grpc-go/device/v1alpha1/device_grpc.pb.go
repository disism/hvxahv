// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/device/v1alpha1/device.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	// DeviceIsExistByHash Gets whether the device is authenticated by the device hash.
	// This method returns a boolean value. Returns true if it does not exist
	// Otherwise returns false.
	DeviceIsExistByHash(ctx context.Context, in *DeviceIsExistByHashRequest, opts ...grpc.CallOption) (*DeviceIsExistByHashResponse, error)
	DeviceIsExistByID(ctx context.Context, in *DeviceIsExistByIDRequest, opts ...grpc.CallOption) (*DeviceIsExistByIDResponse, error)
	// CreateDevice To create the logged-in device data, pass the account id
	// and user agent and generate a hash as a unique identifier
	// for the device.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// GetDevicesByAccountID Get a list of all logged-in devices by account ID.
	GetDevicesByAccountID(ctx context.Context, in *GetDevicesByAccountIDRequest, opts ...grpc.CallOption) (*GetDevicesByAccountIDResponse, error)
	// GetDeviceByID Get detailed data about the device by its unique device ID.
	GetDeviceByID(ctx context.Context, in *GetDeviceByIDRequest, opts ...grpc.CallOption) (*Device, error)
	// GetDeviceByHash Get detailed data about the device by its unique hash.
	GetDeviceByHash(ctx context.Context, in *GetDeviceByHashRequest, opts ...grpc.CallOption) (*Device, error)
	// DeleteDeviceByWithAccountID Delete all logged-in devices by account id.
	DeleteDeviceAllByAccountID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteDeviceAllByAccountIDResponse, error)
	// DeleteDeviceByID Deletes a device by its device id.
	DeleteDeviceByID(ctx context.Context, in *DeleteDeviceByIDRequest, opts ...grpc.CallOption) (*DeleteDeviceByIDResponse, error)
	// DeleteDeviceByHash Deletes a device by its device hash.
	DeleteDeviceByHash(ctx context.Context, in *DeleteDeviceByHashRequest, opts ...grpc.CallOption) (*DeleteDeviceByHashResponse, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) DeviceIsExistByHash(ctx context.Context, in *DeviceIsExistByHashRequest, opts ...grpc.CallOption) (*DeviceIsExistByHashResponse, error) {
	out := new(DeviceIsExistByHashResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/DeviceIsExistByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeviceIsExistByID(ctx context.Context, in *DeviceIsExistByIDRequest, opts ...grpc.CallOption) (*DeviceIsExistByIDResponse, error) {
	out := new(DeviceIsExistByIDResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/DeviceIsExistByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDevicesByAccountID(ctx context.Context, in *GetDevicesByAccountIDRequest, opts ...grpc.CallOption) (*GetDevicesByAccountIDResponse, error) {
	out := new(GetDevicesByAccountIDResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/GetDevicesByAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDeviceByID(ctx context.Context, in *GetDeviceByIDRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/GetDeviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) GetDeviceByHash(ctx context.Context, in *GetDeviceByHashRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/GetDeviceByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDeviceAllByAccountID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteDeviceAllByAccountIDResponse, error) {
	out := new(DeleteDeviceAllByAccountIDResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceAllByAccountID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDeviceByID(ctx context.Context, in *DeleteDeviceByIDRequest, opts ...grpc.CallOption) (*DeleteDeviceByIDResponse, error) {
	out := new(DeleteDeviceByIDResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesClient) DeleteDeviceByHash(ctx context.Context, in *DeleteDeviceByHashRequest, opts ...grpc.CallOption) (*DeleteDeviceByHashResponse, error) {
	out := new(DeleteDeviceByHashResponse)
	err := c.cc.Invoke(ctx, "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations should embed UnimplementedDevicesServer
// for forward compatibility
type DevicesServer interface {
	// DeviceIsExistByHash Gets whether the device is authenticated by the device hash.
	// This method returns a boolean value. Returns true if it does not exist
	// Otherwise returns false.
	DeviceIsExistByHash(context.Context, *DeviceIsExistByHashRequest) (*DeviceIsExistByHashResponse, error)
	DeviceIsExistByID(context.Context, *DeviceIsExistByIDRequest) (*DeviceIsExistByIDResponse, error)
	// CreateDevice To create the logged-in device data, pass the account id
	// and user agent and generate a hash as a unique identifier
	// for the device.
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// GetDevicesByAccountID Get a list of all logged-in devices by account ID.
	GetDevicesByAccountID(context.Context, *GetDevicesByAccountIDRequest) (*GetDevicesByAccountIDResponse, error)
	// GetDeviceByID Get detailed data about the device by its unique device ID.
	GetDeviceByID(context.Context, *GetDeviceByIDRequest) (*Device, error)
	// GetDeviceByHash Get detailed data about the device by its unique hash.
	GetDeviceByHash(context.Context, *GetDeviceByHashRequest) (*Device, error)
	// DeleteDeviceByWithAccountID Delete all logged-in devices by account id.
	DeleteDeviceAllByAccountID(context.Context, *emptypb.Empty) (*DeleteDeviceAllByAccountIDResponse, error)
	// DeleteDeviceByID Deletes a device by its device id.
	DeleteDeviceByID(context.Context, *DeleteDeviceByIDRequest) (*DeleteDeviceByIDResponse, error)
	// DeleteDeviceByHash Deletes a device by its device hash.
	DeleteDeviceByHash(context.Context, *DeleteDeviceByHashRequest) (*DeleteDeviceByHashResponse, error)
}

// UnimplementedDevicesServer should be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) DeviceIsExistByHash(context.Context, *DeviceIsExistByHashRequest) (*DeviceIsExistByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceIsExistByHash not implemented")
}
func (UnimplementedDevicesServer) DeviceIsExistByID(context.Context, *DeviceIsExistByIDRequest) (*DeviceIsExistByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceIsExistByID not implemented")
}
func (UnimplementedDevicesServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDevicesServer) GetDevicesByAccountID(context.Context, *GetDevicesByAccountIDRequest) (*GetDevicesByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesByAccountID not implemented")
}
func (UnimplementedDevicesServer) GetDeviceByID(context.Context, *GetDeviceByIDRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByID not implemented")
}
func (UnimplementedDevicesServer) GetDeviceByHash(context.Context, *GetDeviceByHashRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByHash not implemented")
}
func (UnimplementedDevicesServer) DeleteDeviceAllByAccountID(context.Context, *emptypb.Empty) (*DeleteDeviceAllByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceAllByAccountID not implemented")
}
func (UnimplementedDevicesServer) DeleteDeviceByID(context.Context, *DeleteDeviceByIDRequest) (*DeleteDeviceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceByID not implemented")
}
func (UnimplementedDevicesServer) DeleteDeviceByHash(context.Context, *DeleteDeviceByHashRequest) (*DeleteDeviceByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceByHash not implemented")
}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_DeviceIsExistByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIsExistByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeviceIsExistByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/DeviceIsExistByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeviceIsExistByHash(ctx, req.(*DeviceIsExistByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeviceIsExistByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIsExistByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeviceIsExistByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/DeviceIsExistByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeviceIsExistByID(ctx, req.(*DeviceIsExistByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDevicesByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesByAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDevicesByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/GetDevicesByAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDevicesByAccountID(ctx, req.(*GetDevicesByAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/GetDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDeviceByID(ctx, req.(*GetDeviceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_GetDeviceByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).GetDeviceByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/GetDeviceByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).GetDeviceByHash(ctx, req.(*GetDeviceByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDeviceAllByAccountID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDeviceAllByAccountID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceAllByAccountID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDeviceAllByAccountID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDeviceByID(ctx, req.(*DeleteDeviceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devices_DeleteDeviceByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).DeleteDeviceByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvx.device.v1alpha1.proto.Devices/DeleteDeviceByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).DeleteDeviceByHash(ctx, req.(*DeleteDeviceByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvx.device.v1alpha1.proto.Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceIsExistByHash",
			Handler:    _Devices_DeviceIsExistByHash_Handler,
		},
		{
			MethodName: "DeviceIsExistByID",
			Handler:    _Devices_DeviceIsExistByID_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Devices_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevicesByAccountID",
			Handler:    _Devices_GetDevicesByAccountID_Handler,
		},
		{
			MethodName: "GetDeviceByID",
			Handler:    _Devices_GetDeviceByID_Handler,
		},
		{
			MethodName: "GetDeviceByHash",
			Handler:    _Devices_GetDeviceByHash_Handler,
		},
		{
			MethodName: "DeleteDeviceAllByAccountID",
			Handler:    _Devices_DeleteDeviceAllByAccountID_Handler,
		},
		{
			MethodName: "DeleteDeviceByID",
			Handler:    _Devices_DeleteDeviceByID_Handler,
		},
		{
			MethodName: "DeleteDeviceByHash",
			Handler:    _Devices_DeleteDeviceByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/device/v1alpha1/device.proto",
}
