// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowServicesClient is the client API for FollowServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServicesClient interface {
	CreateFollow(ctx context.Context, in *CreateFollowRequest, opts ...grpc.CallOption) (*CreateFollowResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error)
}

type followServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServicesClient(cc grpc.ClientConnInterface) FollowServicesClient {
	return &followServicesClient{cc}
}

func (c *followServicesClient) CreateFollow(ctx context.Context, in *CreateFollowRequest, opts ...grpc.CallOption) (*CreateFollowResponse, error) {
	out := new(CreateFollowResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.FollowServices/CreateFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServicesClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.FollowServices/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServicesClient) GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*GetFollowingResponse, error) {
	out := new(GetFollowingResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.FollowServices/GetFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServicesServer is the server API for FollowServices service.
// All implementations should embed UnimplementedFollowServicesServer
// for forward compatibility
type FollowServicesServer interface {
	CreateFollow(context.Context, *CreateFollowRequest) (*CreateFollowResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error)
}

// UnimplementedFollowServicesServer should be embedded to have forward compatible implementations.
type UnimplementedFollowServicesServer struct {
}

func (UnimplementedFollowServicesServer) CreateFollow(context.Context, *CreateFollowRequest) (*CreateFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedFollowServicesServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowServicesServer) GetFollowing(context.Context, *GetFollowingRequest) (*GetFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}

// UnsafeFollowServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServicesServer will
// result in compilation errors.
type UnsafeFollowServicesServer interface {
	mustEmbedUnimplementedFollowServicesServer()
}

func RegisterFollowServicesServer(s grpc.ServiceRegistrar, srv FollowServicesServer) {
	s.RegisterService(&FollowServices_ServiceDesc, srv)
}

func _FollowServices_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServicesServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.FollowServices/CreateFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServicesServer).CreateFollow(ctx, req.(*CreateFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowServices_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServicesServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.FollowServices/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServicesServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowServices_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServicesServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.FollowServices/GetFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServicesServer).GetFollowing(ctx, req.(*GetFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowServices_ServiceDesc is the grpc.ServiceDesc for FollowServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1alpha1.proto.FollowServices",
	HandlerType: (*FollowServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFollow",
			Handler:    _FollowServices_CreateFollow_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowServices_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _FollowServices_GetFollowing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/activity/v1alpha1/follow.proto",
}
