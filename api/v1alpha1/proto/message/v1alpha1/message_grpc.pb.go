// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesClient interface {
	// MessageAccessRegister Create a matrix account with a username and password.
	MessageAccessRegister(ctx context.Context, in *MessageAccessRegisterRequest, opts ...grpc.CallOption) (*MessageAccessRegisterResponse, error)
	// MessageAccessLogin Sometimes you need to log in again when the token
	// is wrong or when you reauthorize.
	MessageAccessLogin(ctx context.Context, in *MessageAccessLoginRequest, opts ...grpc.CallOption) (*MessageAccessLoginResponse, error)
	// MessageAccessDelete Delete a matrix account by its account id.
	MessageAccessDelete(ctx context.Context, in *MessageAccessDeleteRequest, opts ...grpc.CallOption) (*MessageAccessDeleteResponse, error)
}

type messagesClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesClient(cc grpc.ClientConnInterface) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) MessageAccessRegister(ctx context.Context, in *MessageAccessRegisterRequest, opts ...grpc.CallOption) (*MessageAccessRegisterResponse, error) {
	out := new(MessageAccessRegisterResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Messages/MessageAccessRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) MessageAccessLogin(ctx context.Context, in *MessageAccessLoginRequest, opts ...grpc.CallOption) (*MessageAccessLoginResponse, error) {
	out := new(MessageAccessLoginResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Messages/MessageAccessLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) MessageAccessDelete(ctx context.Context, in *MessageAccessDeleteRequest, opts ...grpc.CallOption) (*MessageAccessDeleteResponse, error) {
	out := new(MessageAccessDeleteResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Messages/MessageAccessDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagesServer is the server API for Messages service.
// All implementations should embed UnimplementedMessagesServer
// for forward compatibility
type MessagesServer interface {
	// MessageAccessRegister Create a matrix account with a username and password.
	MessageAccessRegister(context.Context, *MessageAccessRegisterRequest) (*MessageAccessRegisterResponse, error)
	// MessageAccessLogin Sometimes you need to log in again when the token
	// is wrong or when you reauthorize.
	MessageAccessLogin(context.Context, *MessageAccessLoginRequest) (*MessageAccessLoginResponse, error)
	// MessageAccessDelete Delete a matrix account by its account id.
	MessageAccessDelete(context.Context, *MessageAccessDeleteRequest) (*MessageAccessDeleteResponse, error)
}

// UnimplementedMessagesServer should be embedded to have forward compatible implementations.
type UnimplementedMessagesServer struct {
}

func (UnimplementedMessagesServer) MessageAccessRegister(context.Context, *MessageAccessRegisterRequest) (*MessageAccessRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAccessRegister not implemented")
}
func (UnimplementedMessagesServer) MessageAccessLogin(context.Context, *MessageAccessLoginRequest) (*MessageAccessLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAccessLogin not implemented")
}
func (UnimplementedMessagesServer) MessageAccessDelete(context.Context, *MessageAccessDeleteRequest) (*MessageAccessDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAccessDelete not implemented")
}

// UnsafeMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesServer will
// result in compilation errors.
type UnsafeMessagesServer interface {
	mustEmbedUnimplementedMessagesServer()
}

func RegisterMessagesServer(s grpc.ServiceRegistrar, srv MessagesServer) {
	s.RegisterService(&Messages_ServiceDesc, srv)
}

func _Messages_MessageAccessRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAccessRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).MessageAccessRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Messages/MessageAccessRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).MessageAccessRegister(ctx, req.(*MessageAccessRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_MessageAccessLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAccessLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).MessageAccessLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Messages/MessageAccessLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).MessageAccessLogin(ctx, req.(*MessageAccessLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_MessageAccessDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAccessDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).MessageAccessDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Messages/MessageAccessDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).MessageAccessDelete(ctx, req.(*MessageAccessDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Messages_ServiceDesc is the grpc.ServiceDesc for Messages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1alpha1.proto.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageAccessRegister",
			Handler:    _Messages_MessageAccessRegister_Handler,
		},
		{
			MethodName: "MessageAccessLogin",
			Handler:    _Messages_MessageAccessLogin_Handler,
		},
		{
			MethodName: "MessageAccessDelete",
			Handler:    _Messages_MessageAccessDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message/v1alpha1/message.proto",
}
