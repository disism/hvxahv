// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	NewAccounts(ctx context.Context, in *NewAccountsData, opts ...grpc.CallOption) (*AccountsReply, error)
	UpdateAccounts(ctx context.Context, in *AccountsData, opts ...grpc.CallOption) (*AccountsReply, error)
	DeleteAccounts(ctx context.Context, in *AccountsName, opts ...grpc.CallOption) (*AccountsReply, error)
	QueryAccounts(ctx context.Context, in *AccountsName, opts ...grpc.CallOption) (*AccountsData, error)
	LoginAccounts(ctx context.Context, in *AccountsLogin, opts ...grpc.CallOption) (*AccountsLoginReply, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) NewAccounts(ctx context.Context, in *NewAccountsData, opts ...grpc.CallOption) (*AccountsReply, error) {
	out := new(AccountsReply)
	err := c.cc.Invoke(ctx, "/kurotobi.v1alpha1.proto.Accounts/NewAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateAccounts(ctx context.Context, in *AccountsData, opts ...grpc.CallOption) (*AccountsReply, error) {
	out := new(AccountsReply)
	err := c.cc.Invoke(ctx, "/kurotobi.v1alpha1.proto.Accounts/UpdateAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteAccounts(ctx context.Context, in *AccountsName, opts ...grpc.CallOption) (*AccountsReply, error) {
	out := new(AccountsReply)
	err := c.cc.Invoke(ctx, "/kurotobi.v1alpha1.proto.Accounts/DeleteAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) QueryAccounts(ctx context.Context, in *AccountsName, opts ...grpc.CallOption) (*AccountsData, error) {
	out := new(AccountsData)
	err := c.cc.Invoke(ctx, "/kurotobi.v1alpha1.proto.Accounts/QueryAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) LoginAccounts(ctx context.Context, in *AccountsLogin, opts ...grpc.CallOption) (*AccountsLoginReply, error) {
	out := new(AccountsLoginReply)
	err := c.cc.Invoke(ctx, "/kurotobi.v1alpha1.proto.Accounts/LoginAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	NewAccounts(context.Context, *NewAccountsData) (*AccountsReply, error)
	UpdateAccounts(context.Context, *AccountsData) (*AccountsReply, error)
	DeleteAccounts(context.Context, *AccountsName) (*AccountsReply, error)
	QueryAccounts(context.Context, *AccountsName) (*AccountsData, error)
	LoginAccounts(context.Context, *AccountsLogin) (*AccountsLoginReply, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) NewAccounts(context.Context, *NewAccountsData) (*AccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccounts not implemented")
}
func (UnimplementedAccountsServer) UpdateAccounts(context.Context, *AccountsData) (*AccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccounts not implemented")
}
func (UnimplementedAccountsServer) DeleteAccounts(context.Context, *AccountsName) (*AccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccounts not implemented")
}
func (UnimplementedAccountsServer) QueryAccounts(context.Context, *AccountsName) (*AccountsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccounts not implemented")
}
func (UnimplementedAccountsServer) LoginAccounts(context.Context, *AccountsLogin) (*AccountsLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccounts not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_NewAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).NewAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kurotobi.v1alpha1.proto.Accounts/NewAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).NewAccounts(ctx, req.(*NewAccountsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kurotobi.v1alpha1.proto.Accounts/UpdateAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateAccounts(ctx, req.(*AccountsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kurotobi.v1alpha1.proto.Accounts/DeleteAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteAccounts(ctx, req.(*AccountsName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_QueryAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).QueryAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kurotobi.v1alpha1.proto.Accounts/QueryAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).QueryAccounts(ctx, req.(*AccountsName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_LoginAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).LoginAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kurotobi.v1alpha1.proto.Accounts/LoginAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).LoginAccounts(ctx, req.(*AccountsLogin))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kurotobi.v1alpha1.proto.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAccounts",
			Handler:    _Accounts_NewAccounts_Handler,
		},
		{
			MethodName: "UpdateAccounts",
			Handler:    _Accounts_UpdateAccounts_Handler,
		},
		{
			MethodName: "DeleteAccounts",
			Handler:    _Accounts_DeleteAccounts_Handler,
		},
		{
			MethodName: "QueryAccounts",
			Handler:    _Accounts_QueryAccounts_Handler,
		},
		{
			MethodName: "LoginAccounts",
			Handler:    _Accounts_LoginAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hvxahv/v1alpha1/accounts.proto",
}
