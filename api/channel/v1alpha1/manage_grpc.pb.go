// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageServiceClient interface {
	IsAdministrator(ctx context.Context, in *IsAdministratorRequest, opts ...grpc.CallOption) (*IsAdministratorResponse, error)
	AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error)
	RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error)
	GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error)
}

type manageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageServiceClient(cc grpc.ClientConnInterface) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) IsAdministrator(ctx context.Context, in *IsAdministratorRequest, opts ...grpc.CallOption) (*IsAdministratorResponse, error) {
	out := new(IsAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.ManageService/IsAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error) {
	out := new(AddAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.ManageService/AddAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error) {
	out := new(RemoveAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.ManageService/RemoveAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error) {
	out := new(GetAdministratorsResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.ManageService/GetAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
// All implementations must embed UnimplementedManageServiceServer
// for forward compatibility
type ManageServiceServer interface {
	IsAdministrator(context.Context, *IsAdministratorRequest) (*IsAdministratorResponse, error)
	AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error)
	RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error)
	GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error)
	mustEmbedUnimplementedManageServiceServer()
}

// UnimplementedManageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageServiceServer struct {
}

func (UnimplementedManageServiceServer) IsAdministrator(context.Context, *IsAdministratorRequest) (*IsAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdministrator not implemented")
}
func (UnimplementedManageServiceServer) AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdministrator not implemented")
}
func (UnimplementedManageServiceServer) RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdministrator not implemented")
}
func (UnimplementedManageServiceServer) GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrators not implemented")
}
func (UnimplementedManageServiceServer) mustEmbedUnimplementedManageServiceServer() {}

// UnsafeManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServiceServer will
// result in compilation errors.
type UnsafeManageServiceServer interface {
	mustEmbedUnimplementedManageServiceServer()
}

func RegisterManageServiceServer(s grpc.ServiceRegistrar, srv ManageServiceServer) {
	s.RegisterService(&ManageService_ServiceDesc, srv)
}

func _ManageService_IsAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).IsAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.ManageService/IsAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).IsAdministrator(ctx, req.(*IsAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_AddAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).AddAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.ManageService/AddAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).AddAdministrator(ctx, req.(*AddAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_RemoveAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).RemoveAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.ManageService/RemoveAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).RemoveAdministrator(ctx, req.(*RemoveAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_GetAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).GetAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.ManageService/GetAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).GetAdministrators(ctx, req.(*GetAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageService_ServiceDesc is the grpc.ServiceDesc for ManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1alpha1.proto.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAdministrator",
			Handler:    _ManageService_IsAdministrator_Handler,
		},
		{
			MethodName: "AddAdministrator",
			Handler:    _ManageService_AddAdministrator_Handler,
		},
		{
			MethodName: "RemoveAdministrator",
			Handler:    _ManageService_RemoveAdministrator_Handler,
		},
		{
			MethodName: "GetAdministrators",
			Handler:    _ManageService_GetAdministrators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/channel/v1alpha1/manage.proto",
}
