// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdministrativeServiceClient is the client API for AdministrativeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministrativeServiceClient interface {
	// IsChannelAdministrator It is the admin that returns true not false.
	IsChannelAdministrator(ctx context.Context, in *IsChannelAdministratorRequest, opts ...grpc.CallOption) (*IsChannelAdministratorResponse, error)
	AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error)
	RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error)
	GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error)
}

type administrativeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrativeServiceClient(cc grpc.ClientConnInterface) AdministrativeServiceClient {
	return &administrativeServiceClient{cc}
}

func (c *administrativeServiceClient) IsChannelAdministrator(ctx context.Context, in *IsChannelAdministratorRequest, opts ...grpc.CallOption) (*IsChannelAdministratorResponse, error) {
	out := new(IsChannelAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.AdministrativeService/IsChannelAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeServiceClient) AddAdministrator(ctx context.Context, in *AddAdministratorRequest, opts ...grpc.CallOption) (*AddAdministratorResponse, error) {
	out := new(AddAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.AdministrativeService/AddAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeServiceClient) RemoveAdministrator(ctx context.Context, in *RemoveAdministratorRequest, opts ...grpc.CallOption) (*RemoveAdministratorResponse, error) {
	out := new(RemoveAdministratorResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.AdministrativeService/RemoveAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrativeServiceClient) GetAdministrators(ctx context.Context, in *GetAdministratorsRequest, opts ...grpc.CallOption) (*GetAdministratorsResponse, error) {
	out := new(GetAdministratorsResponse)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.AdministrativeService/GetAdministrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrativeServiceServer is the server API for AdministrativeService service.
// All implementations must embed UnimplementedAdministrativeServiceServer
// for forward compatibility
type AdministrativeServiceServer interface {
	// IsChannelAdministrator It is the admin that returns true not false.
	IsChannelAdministrator(context.Context, *IsChannelAdministratorRequest) (*IsChannelAdministratorResponse, error)
	AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error)
	RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error)
	GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error)
	mustEmbedUnimplementedAdministrativeServiceServer()
}

// UnimplementedAdministrativeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdministrativeServiceServer struct {
}

func (UnimplementedAdministrativeServiceServer) IsChannelAdministrator(context.Context, *IsChannelAdministratorRequest) (*IsChannelAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChannelAdministrator not implemented")
}
func (UnimplementedAdministrativeServiceServer) AddAdministrator(context.Context, *AddAdministratorRequest) (*AddAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdministrator not implemented")
}
func (UnimplementedAdministrativeServiceServer) RemoveAdministrator(context.Context, *RemoveAdministratorRequest) (*RemoveAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdministrator not implemented")
}
func (UnimplementedAdministrativeServiceServer) GetAdministrators(context.Context, *GetAdministratorsRequest) (*GetAdministratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrators not implemented")
}
func (UnimplementedAdministrativeServiceServer) mustEmbedUnimplementedAdministrativeServiceServer() {}

// UnsafeAdministrativeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministrativeServiceServer will
// result in compilation errors.
type UnsafeAdministrativeServiceServer interface {
	mustEmbedUnimplementedAdministrativeServiceServer()
}

func RegisterAdministrativeServiceServer(s grpc.ServiceRegistrar, srv AdministrativeServiceServer) {
	s.RegisterService(&AdministrativeService_ServiceDesc, srv)
}

func _AdministrativeService_IsChannelAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsChannelAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServiceServer).IsChannelAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.AdministrativeService/IsChannelAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServiceServer).IsChannelAdministrator(ctx, req.(*IsChannelAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrativeService_AddAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServiceServer).AddAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.AdministrativeService/AddAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServiceServer).AddAdministrator(ctx, req.(*AddAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrativeService_RemoveAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServiceServer).RemoveAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.AdministrativeService/RemoveAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServiceServer).RemoveAdministrator(ctx, req.(*RemoveAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministrativeService_GetAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrativeServiceServer).GetAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.AdministrativeService/GetAdministrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrativeServiceServer).GetAdministrators(ctx, req.(*GetAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministrativeService_ServiceDesc is the grpc.ServiceDesc for AdministrativeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministrativeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1alpha1.proto.AdministrativeService",
	HandlerType: (*AdministrativeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsChannelAdministrator",
			Handler:    _AdministrativeService_IsChannelAdministrator_Handler,
		},
		{
			MethodName: "AddAdministrator",
			Handler:    _AdministrativeService_AddAdministrator_Handler,
		},
		{
			MethodName: "RemoveAdministrator",
			Handler:    _AdministrativeService_RemoveAdministrator_Handler,
		},
		{
			MethodName: "GetAdministrators",
			Handler:    _AdministrativeService_GetAdministrators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/channel/v1alpha1/administrative.proto",
}
