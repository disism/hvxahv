// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SavedClient is the client API for Saved service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SavedClient interface {
	Create(ctx context.Context, in *NewSavedCreate, opts ...grpc.CallOption) (*SavedReply, error)
	GetSaves(ctx context.Context, in *NewSavedAccountID, opts ...grpc.CallOption) (*GetSavesReply, error)
	GetSaved(ctx context.Context, in *NewSavedID, opts ...grpc.CallOption) (*SavedData, error)
}

type savedClient struct {
	cc grpc.ClientConnInterface
}

func NewSavedClient(cc grpc.ClientConnInterface) SavedClient {
	return &savedClient{cc}
}

func (c *savedClient) Create(ctx context.Context, in *NewSavedCreate, opts ...grpc.CallOption) (*SavedReply, error) {
	out := new(SavedReply)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Saved/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) GetSaves(ctx context.Context, in *NewSavedAccountID, opts ...grpc.CallOption) (*GetSavesReply, error) {
	out := new(GetSavesReply)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Saved/GetSaves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *savedClient) GetSaved(ctx context.Context, in *NewSavedID, opts ...grpc.CallOption) (*SavedData, error) {
	out := new(SavedData)
	err := c.cc.Invoke(ctx, "/hvxahv.v1alpha1.proto.Saved/GetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SavedServer is the server API for Saved service.
// All implementations must embed UnimplementedSavedServer
// for forward compatibility
type SavedServer interface {
	Create(context.Context, *NewSavedCreate) (*SavedReply, error)
	GetSaves(context.Context, *NewSavedAccountID) (*GetSavesReply, error)
	GetSaved(context.Context, *NewSavedID) (*SavedData, error)
	mustEmbedUnimplementedSavedServer()
}

// UnimplementedSavedServer must be embedded to have forward compatible implementations.
type UnimplementedSavedServer struct {
}

func (UnimplementedSavedServer) Create(context.Context, *NewSavedCreate) (*SavedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSavedServer) GetSaves(context.Context, *NewSavedAccountID) (*GetSavesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaves not implemented")
}
func (UnimplementedSavedServer) GetSaved(context.Context, *NewSavedID) (*SavedData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaved not implemented")
}
func (UnimplementedSavedServer) mustEmbedUnimplementedSavedServer() {}

// UnsafeSavedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SavedServer will
// result in compilation errors.
type UnsafeSavedServer interface {
	mustEmbedUnimplementedSavedServer()
}

func RegisterSavedServer(s grpc.ServiceRegistrar, srv SavedServer) {
	s.RegisterService(&Saved_ServiceDesc, srv)
}

func _Saved_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSavedCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Saved/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).Create(ctx, req.(*NewSavedCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_GetSaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSavedAccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetSaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Saved/GetSaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetSaves(ctx, req.(*NewSavedAccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Saved_GetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSavedID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SavedServer).GetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1alpha1.proto.Saved/GetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SavedServer).GetSaved(ctx, req.(*NewSavedID))
	}
	return interceptor(ctx, in, info, handler)
}

// Saved_ServiceDesc is the grpc.ServiceDesc for Saved service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Saved_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1alpha1.proto.Saved",
	HandlerType: (*SavedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Saved_Create_Handler,
		},
		{
			MethodName: "GetSaves",
			Handler:    _Saved_GetSaves_Handler,
		},
		{
			MethodName: "GetSaved",
			Handler:    _Saved_GetSaved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/saved/v1alpha1/saved.proto",
}
